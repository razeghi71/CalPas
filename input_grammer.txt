35
program@program
var@var
array@array
of@of
num@[0-9]+(\.[0-9]+(E(\+|\-)[0-9]+)?)?
integer@integer
real@real
function@function
procedure@procedure
begin@begin
end@end
assignop@:=
if@if
then@then
else@else
while@while
do@do
relop@<|>|=|<>|>=|<=
addop@\+|\-|or
mulop@\*|div|mod|and|/
not@not
dotdot@\.\.
+@\+
-@\-
;@;
.@\.
,@,
:@\:
)@\)
(@\(
[@\[
]@\]
id@[a-zA-Z][A-Za-z0-9]*
Epsilon@
$@$
60
programe := program #name_pusher id arguments ; declarations subprogram-declarations compound-statement . $    #name_pusher : faghat esm ro roo stack mizare ke badan bezare to ST
arguments := ( parameter-list )
arguments := Epsilon
parameter-list := #id-list-start identifier-list : type  param-gen    			#type: vaghit parametra ro khondim,typesh ro moshakhas mikone
param-gen := ; #id-list-start identifier-list : type  param-gen				#id-lis..:  ye reshteye khasi ro vared mikonim ke bdonim az koja shoro shode
param-gen := Epsilon
identifier-list := #name_pusher id id-gen
id-gen := , #name_pusher id id-gen
id-gen := Epsilon
declarations := var #id-list-start identifier-list : type #type ; dec-gen
dec-gen := var #id-list-start identifier-list : type ; #type dec-gen
dec-gen := Epsilon
type := standard-type #ST-standard
type := array [ dimension ] of standard-type #ST-array
dimension := #first_index num dotdot #second_index num dim-gen
dim-gen := , #first_index num dotdot #second_index num  dim-gen
dim-gen := Epsilon
standard-type := #push_integer integer
standard-type := #push_real real
subprogram-declarations := subprogram-declaration subprogram-declarations ;
subprogram-declarations := Epsilon
subprogram-declaration := subprogram-head declarations compound-statement
subprogram-head := function #name_pusher id arguments : standard-type ;
subprogram-head := procedure #name_pusher id arguments ;
compound-statement := begin optional-statements end
optional-statements := statement-list
optional-statements := Epsilon
statement-list := statement statement-list-gen
statement-list-gen := ; statement statement-list-gen
statement-list-gen := Epsilon
statement := variable assignop expression #assignment
statement := procedure-statement
statement := compound-statement
statement := if expression then statement else statement
statement := while expression do statement
variable := #name_pusher id array-index
array-index := Epsilon
array-index := [ expression ] #compute_variable
procedure-statement := #name_pusher id call-parameters
call-parameters := ( #exp-list-start expression-list # )
call-parameters := Epsilon
expression-list-gen := Epsilon
expression-list-gen := , expression expression-list-gen
expression-list := expression expression-list-gen
expression := simple-expression logical-expression
logical-expression := relop simple-expression
logical-expression := Epsilon
simple-expression := term sum-operand
simple-expression := sign term sum-operand
sum-operand := addop term sum-operand
sum-operand := Epsilon
term := factor mulop-operand
mulop-operand := mulop factor
mulop-operand := Epsilon
factor := id call-parameters
factor := num
factor := ( expression )
factor := not factor
sign := +
sign := -
